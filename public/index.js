(function() {
  'use strict';
  const STUDENTS = {
    "PEI1": ["Bilal Molina", "Faysal Achar", "Jad Mhayni", "Manef Kotbi"], "PEI2": ["Ahmed Bouaziz", "Yasser Younis", "Ali Kotbi", "Eyad Hassan"],
    "PEI3": ["Seif Eddine Ayadi", "Mohamed Chalak", "Wajih Sabadine", "Ahmed Mhayni", "Adam Kaaki"],
    "PEI4": ["Mohamed Younis", "Samir Kaaki", "Youssif Baakek", "Mohamed Amine Sgheyer", "Abdurahman Bouaziz"], "DP2": ["Habib Lteif", "Saleh Boumalouga"]
  };
  const DEFAULT_HOMEWORK = {
    "PEI1": { "Maths": "Exercices révision tables", "Français": "Lecture 15 min", "علوم": "حلّ نشاط", "Islamic": "حفظ 3 آيات" }, "PEI2": { "Maths": "Ex 5-8 p.12", "Français": "Texte p.7", "Science": "WB p.3" },
    "PEI3": { "Maths": "Problèmes p.20", "English": "WB p.4", "Physique-Chimie": "Ex p.10" }, "PEI4": { "Maths": "Exercices p.14", "Français": "Rédaction 10 lignes" }, "DP2": { "Biologie": "QCM chapitre 1", "Anglais": "Essay outline" }
  };
  const I18N = {
    fr: { teacherMode: "Mode enseignant", filters: "Filtres", class: "Classe", student: "Élève", weekOf: "Semaine du", weekHint: "Choisissez un jour de la semaine souhaitée (dim-jeu).", uploadExcel: "Importer Excel", downloadJson: "Données locales", export: "Exporter", import: "Importer", homework: "Devoirs", weeklyProgress: "Progression hebdomadaire", teacherTools: "Outils enseignant", done: "Fait", partial: "Partiel", notdone: "Non/Absent", commentPH: "Commentaire de l’enseignant…", statusTitle: "Statut du devoir", appTitle: "Suivi des devoirs", teacherNote: "Sélectionnez un statut et ajoutez un commentaire par matière et par jour.", weeklyHomeworkBadge: "Devoir de la semaine", selectClassStudent: "Veuillez sélectionner une classe et un élève.", importSuccess: "Import réussi", importFailed: "Échec de l'import", invalidCode: "Code invalide", teacherCodePrompt: "Entrer le code enseignant (ex: 1234)", },
    ar: { teacherMode: "وضع المعلّم", filters: "المرشّحات", class: "الصف", student: "الطالب", weekOf: "أسبوع", weekHint: "اختر أي يوم ضمن الأسبوع المطلوب.", uploadExcel: "استيراد Excel", downloadJson: "البيانات المحلية", export: "تصدير", import: "استيراد", homework: "الواجبات", weeklyProgress: "التقدّم الأسبوعي", teacherTools: "أدوات المعلّم", done: "منجز", partial: "جزئياً", notdone: "غير منجز/غائب", commentPH: "ملاحظة المعلّم…", statusTitle: "حالة الواجب", appTitle: "متابعة الواجبات", teacherNote: "حدد الحالة وأضف تعليقًا لكل مادة في اليوم.", weeklyHomeworkBadge: "واجب أسبوعي", selectClassStudent: "الرجاء اختيار فصل وطالب.", importSuccess: "تم الاستيراد بنجاح", importFailed: "فشل الاستيراد", invalidCode: "رمز غير صحيح", teacherCodePrompt: "أدخل رمز المعلّم (مثال: 1234)", }
  };
  const LS_KEY = "hw-tracker-v3";
  const state = { lang: 'fr', isTeacherMode: false, selectedClass: null, selectedStudent: null, weekAnchor: null, homeworkByClass: {}, records: {} };
  const dom = {
    classSelect: document.getElementById("classSelect"), studentSelect: document.getElementById("studentSelect"), weekAnchor: document.getElementById("weekAnchor"), daysGrid: document.getElementById("daysGrid"),
    progressFill: document.getElementById("progressFill"), progressPct: document.getElementById("progressPct"), teacherModeBtn: document.getElementById("teacherModeBtn"), teacherPanel: document.getElementById("teacherPanel"),
    langToggle: document.getElementById("langToggle"), excelInput: document.getElementById("excelInput"), exportBtn: document.getElementById("exportBtn"), importBtn: document.getElementById("importBtn"), importJsonInput: document.getElementById("importJsonInput"),
  };
  const store = {
    load() { try { const data = JSON.parse(localStorage.getItem(LS_KEY)); if (data) Object.assign(state, data); } catch (e) {} if (Object.keys(state.homeworkByClass).length === 0) state.homeworkByClass = DEFAULT_HOMEWORK; },
    save() { try { localStorage.setItem(LS_KEY, JSON.stringify(state)); } catch (e) {} }
  };
  function render() { applyLang(); populateClasses(); populateStudents(); renderWeek(); updateTeacherModeUI(); }
  function applyLang() { const dict = I18N[state.lang]; document.querySelectorAll("[data-i18n]").forEach(el => { const key = el.dataset.i18n; if (dict[key]) el.textContent = dict[key]; }); document.getElementById("appTitle").textContent = dict.appTitle; document.documentElement.lang = state.lang; document.documentElement.dir = state.lang === "ar" ? "rtl" : "ltr"; }
  function populateClasses() { const f = document.createDocumentFragment(); Object.keys(STUDENTS).forEach(c => { const o = document.createElement("option"); o.value = c; o.textContent = c; f.appendChild(o); }); dom.classSelect.innerHTML = ""; dom.classSelect.appendChild(f); dom.classSelect.value = state.selectedClass; }
  function populateStudents() { const s = STUDENTS[state.selectedClass] || []; const f = document.createDocumentFragment(); s.forEach(st => { const o = document.createElement("option"); o.value = st; o.textContent = st; f.appendChild(o); }); dom.studentSelect.innerHTML = ""; dom.studentSelect.appendChild(f); if (s.includes(state.selectedStudent)) { dom.studentSelect.value = state.selectedStudent; } else if (s.length > 0) { state.selectedStudent = s[0]; dom.studentSelect.value = s[0]; } else { state.selectedStudent = null; } }
  function renderWeek() { if (!state.selectedClass || !state.selectedStudent) { dom.daysGrid.innerHTML = `<p class="muted">${I18N[state.lang].selectClassStudent}</p>`; updateProgress(0, 0); return; } dom.daysGrid.innerHTML = ""; const wk = getWeekKey(state.weekAnchor); const subjects = state.homeworkByClass[state.selectedClass] || {}; const dayNames = state.lang === 'ar' ? ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"] : ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi"]; let total = 0, done = 0; const f = document.createDocumentFragment(); for (let i = 0; i < 5; i++) { f.appendChild(createDayCard({ dayIndex: i, date: addDays(new Date(wk), i), dayName: dayNames[i], subjects })); } dom.daysGrid.appendChild(f); Object.keys(subjects).forEach(s => { for (let i = 0; i < 5; i++) { total++; if (state.records[getRecordKey(i, s)]?.status === 'green') done++; } }); updateProgress(total, done); }
  function createDayCard({ dayIndex, date, dayName, subjects }) { const c = document.createElement("div"); c.className = "day-card"; c.innerHTML = `<div class="day-header"><h3>${dayName}</h3><div class="date">${date.toLocaleDateString(state.lang === 'ar' ? 'ar-SA' : 'fr-FR', { day: '2-digit', month: 'short' })}</div></div>`; Object.entries(subjects).forEach(([s, h]) => c.appendChild(createSubjectElement(dayIndex, s, h))); return c; }
  function createSubjectElement(dayIndex, subject, homework) { const rk = getRecordKey(dayIndex, subject); const rec = state.records[rk] || {}; const box = document.createElement("div"); box.className = "subject"; const btns = ['green', 'orange', 'red'].map(c => createStatusButton(c, rec.status)).join(''); box.innerHTML = `<div class="subject-head"><div class="subject-title">${subject}</div><div class="badge">${I18N[state.lang].weeklyHomeworkBadge}</div></div><p class="muted">${homework}</p><div class="status-set">${btns}</div><div class="comment-wrap"><textarea placeholder="${I18N[state.lang].commentPH}" ${!state.isTeacherMode ? 'disabled' : ''}>${rec.comment || ''}</textarea></div>`; box.querySelectorAll('.circle').forEach(b => b.addEventListener('click', () => handleStatusClick(dayIndex, subject, b.dataset.color))); box.querySelector('textarea').addEventListener('change', (e) => handleCommentChange(dayIndex, subject, e.target.value)); return box; }
  function createStatusButton(color, active) { const smap = { green: 'done', orange: 'partial', red: 'notdone' }; return `<button type="button" class="circle ${color} ${active === color ? 'active' : ''}" data-color="${color}" title="${I18N[state.lang][smap[color]]}" ${!state.isTeacherMode ? 'disabled' : ''}>${{ green: '✓', orange: '~', red: '✕' }[color]}</button>`; }
  function updateProgress(total, done) { const pct = total > 0 ? Math.round((done / total) * 100) : 0; dom.progressFill.style.width = `${pct}%`; dom.progressPct.textContent = `${pct}%`; }
  function updateTeacherModeUI() { dom.teacherPanel.classList.toggle('hidden', !state.isTeacherMode); document.body.dataset.teacher = state.isTeacherMode ? "1" : "0"; renderWeek(); }
  const getSunday = d => { const date = new Date(d); date.setDate(date.getDate() - date.getDay()); date.setHours(0, 0, 0, 0); return date; }; const addDays = (d, n) => { const D = new Date(d); D.setDate(D.getDate() + n); return D; }; const getWeekKey = d => getSunday(d).toISOString().slice(0, 10); const getRecordKey = (d, s) => `${state.selectedClass}||${state.selectedStudent}||${getWeekKey(state.weekAnchor)}||${d}||${s}`;
  function handleClassChange() { state.selectedClass = dom.classSelect.value; populateStudents(); state.selectedStudent = dom.studentSelect.value; store.save(); renderWeek(); }
  function handleStudentChange() { state.selectedStudent = dom.studentSelect.value; store.save(); renderWeek(); }
  function handleWeekChange() { state.weekAnchor = dom.weekAnchor.valueAsDate; store.save(); renderWeek(); }
  function handleStatusClick(d, s, newStatus) { if (!state.isTeacherMode) return; const k = getRecordKey(d, s); state.records[k] = state.records[k] || {}; state.records[k].status = state.records[k].status === newStatus ? null : newStatus; store.save(); renderWeek(); }
  function handleCommentChange(d, s, text) { if (!state.isTeacherMode) return; const k = getRecordKey(d, s); state.records[k] = state.records[k] || {}; state.records[k].comment = text.trim(); store.save(); }
  function handleLangToggle() { state.lang = state.lang === 'fr' ? 'ar' : 'fr'; store.save(); render(); }
  function handleToggleTeacherMode() { if (state.isTeacherMode) { state.isTeacherMode = false; } else { const code = prompt(I18N[state.lang].teacherCodePrompt); if (code === "1234") { state.isTeacherMode = true; } else if (code) alert(I18N[state.lang].invalidCode); } store.save(); updateTeacherModeUI(); }
  async function handleExcelImport(e) { const f = e.target.files[0]; if (!f) return; try { const wb = XLSX.read(await f.arrayBuffer()); const rows = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]); let count = 0; rows.forEach(r => { const c = (r.Classe || "").toString().trim(), m = (r.Matière || "").toString().trim(), d = (r.Devoir || "").toString().trim(); if (c && m && d) { state.homeworkByClass[c] = state.homeworkByClass[c] || {}; state.homeworkByClass[c][m] = d; count++; } }); store.save(); alert(`${I18N[state.lang].importSuccess}: ${count} entrées.`); renderWeek(); } catch (err) { alert(`${I18N[state.lang].importFailed}: ${err.message}`); } finally { e.target.value = ''; } }
  function handleJsonExport() { const a = document.createElement("a"); a.href = URL.createObjectURL(new Blob([JSON.stringify(state, null, 2)], { type: "application/json" })); a.download = "donnees_devoirs.json"; a.click(); URL.revokeObjectURL(a.href); }
  async function handleJsonImport(e) { const f = e.target.files[0]; if (!f) return; try { const data = JSON.parse(await f.text()); if (data && 'selectedClass' in data) { Object.assign(state, data); store.save(); init(true); alert(I18N[state.lang].importSuccess); } else { throw new Error("Fichier JSON invalide."); } } catch (err) { alert(`${I18N[state.lang].importFailed}: ${err.message}`); } finally { e.target.value = ''; } }
  function init(isReload = false) { if (!isReload) store.load(); if (!state.selectedClass) state.selectedClass = Object.keys(STUDENTS)[0]; if (!state.selectedStudent) state.selectedStudent = STUDENTS[state.selectedClass]?.[0]; if (!state.weekAnchor) state.weekAnchor = getSunday(new Date()); dom.weekAnchor.valueAsDate = new Date(state.weekAnchor); if (!dom.classSelect.dataset.init) { dom.classSelect.addEventListener("change", handleClassChange); dom.studentSelect.addEventListener("change", handleStudentChange); dom.weekAnchor.addEventListener("change", handleWeekChange); dom.langToggle.addEventListener("click", handleLangToggle); dom.teacherModeBtn.addEventListener("click", handleToggleTeacherMode); dom.excelInput.addEventListener("change", handleExcelImport); dom.exportBtn.addEventListener("click", handleJsonExport); dom.importBtn.addEventListener("click", () => dom.importJsonInput.click()); dom.importJsonInput.addEventListener("change", handleJsonImport); dom.classSelect.dataset.init = 'true'; } render(); }
  document.addEventListener("DOMContentLoaded", () => init(false));
})();```